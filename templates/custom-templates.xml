<templateSet group="custom-templates">
  <template name="template-testclassjunit4-springboottest(gesamter-context)" value="@SpringBootTest&#10;@RunWith(SpringRunner.class)&#10;@Slf4j //nur wenn logausgaben nötig sind&#10;public class $CLASS_NAME$ {&#10;&#10;    @Test&#10;    public void $TestName$() {&#10;        $END$&#10;    }&#10;&#10;}" description="template to create a junit4-testclass with@Springboottest (loads the hole spring-boot-context)" toReformat="false" toShortenFQNames="true">
    <variable name="CLASS_NAME" expression="" defaultValue="ClassNameTest" alwaysStopAt="true" />
    <variable name="TestName" expression="" defaultValue="testName" alwaysStopAt="true" />
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="template-testclassjunit4-webmvctest(nur-web-components)" value="@RunWith(SpringRunner.class)&#10;@WebMvcTest(/*Klassen inserten, die @autowired werden sollen z.B. {PostpayBalanceService.class, GetInfo3Client.class}*/)&#10;@Slf4j //nur wenn geloggt werden soll&#10;public class $CLASS_NAME_TEST$ {&#10;&#10;    @Test&#10;    public void test() {&#10;   &#10;    }&#10;&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <variable name="CLASS_NAME_TEST" expression="" defaultValue="ClassNameTest" alwaysStopAt="true" />
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="template-test-given-mockito" value="BDDMockito.given(GivenClass.givenMethod(ArgumentMatchers.any()))&#10;                .willReturn(&quot;info3Response&quot;);" description="inserts a given method for a mock" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="template-testAssertException-Junit5" value="Assertions.assertThrows(IllegalArgumentException.class, () -&gt; {&#10;            verificationService.isCustomerVerificationValid(verificationData);&#10;        });" description="assertes a exception for a given method (junit5 only)" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="template-testAssertException-Junit4" value=" @Rule&#10;    public final ExpectedException expectedException = ExpectedException.none();&#10;&#10;    @Test&#10;    public void failTest() {&#10;        expectedException.expect(BadGatewayException.class);&#10;        expectedException.expectMessage(&quot;Got illegal response from Backend.&quot;);&#10;&#10;        //further testing here&#10;    }" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="template-testController" value="@RunWith(SpringRunner.class)&#10;@WebMvcTest(AccountController.class)&#10;//specify snippet-dirpctory&#10;@AutoConfigureRestDocs(outputDir = &quot;build/generated-snippets/ksm-postpay&quot;)&#10;public class $CLASS_NAME$ {&#10;&#10;    private static final MediaType DEFAULT_CONTENT_TYPE = MediaType.APPLICATION_JSON_UTF8;&#10;&#10;    @Autowired&#10;    private MockMvc mockMvc;&#10;&#10;&#10;    @MockBean&#10;    AccountController accountController;&#10;&#10;    @Test&#10;    public void controllerTest() throws Exception {&#10;&#10;        //request-poyload&#10;        String request = &quot;{ \&quot;msisdn\&quot;: \&quot;49171123456789\&quot;,&quot; +&#10;                         &quot; \&quot;currentMinBudget\&quot;: 500,&quot; +&#10;                         &quot; \&quot;currentMonth\&quot;: \&quot;Jan\&quot;,&quot; +&#10;                         &quot; \&quot;currentSumEuroCent\&quot;: 1000,&quot; +&#10;                         &quot; \&quot;lastMonth\&quot;: \&quot;Dez\&quot;,&quot; +&#10;                         &quot; \&quot;lastSumEuroCent\&quot;: 200&quot; +&#10;                         &quot;}&quot;;&#10;        &#10;        /*Alternatively you can create the real Request-Payload-Object and &#10;        * map it to a string by Objectmapper&#10;        * e.g. &#10;        Request request = new Payload();&#10;        payload.setNumber(&quot;491234567&quot;);&#10;        HttpHeaders httpHeaders = new HttpHeaders();&#10;        httpHeaders.setContentType(MediaType.APPLICATION_JSON);&#10;        ResponseEntity&lt;PostpayInfoResource&gt; responseEntity = new ResponseEntity&lt;&gt;(request, httpHeaders, HttpStatus.OK);&#10;        ObjectMapper objectMapper = new ObjectMapper();&#10;        String requestJSON = objectMapper.writeValueAsString(request);&#10;        * */&#10;&#10;        //controller-method to test mock (if you specify a real Request-object, you can put is in the method parameter instad of any()&#10;        //the Payload from willReturn method will be shown in the Response-snippets (in this case just a OK-Responseentity with no payload) &#10;        BDDMockito.given(accountController.postMSISDNAndGetAccountInfoSMS(ArgumentMatchers.any())).willReturn(new ResponseEntity&lt;&gt;(HttpStatus.OK));&#10;&#10;        //specify endpoint&#10;        mockMvc.perform(MockMvcRequestBuilders.post(&quot;/mobile/accountbalance/postpay/sms&quot;)&#10;                                .header(&quot;X-B3-TraceId&quot;, UUID.randomUUID())&#10;                                .header(&quot;X-B3-SpanId&quot;, UUID.randomUUID())&#10;                                .content(request)&#10;                                .contentType(MediaType.APPLICATION_JSON))&#10;                .andExpect(MockMvcResultMatchers.status().isOk())&#10;                //specify document-name&#10;                .andDo(MockMvcRestDocumentation.document(&quot;post-account-data-sms&quot;,&#10;                                                               Preprocessors.preprocessRequest(Preprocessors.prettyPrint()),&#10;                                                               Preprocessors.preprocessResponse(Preprocessors.prettyPrint()),&#10;                                                               HeaderDocumentation.requestHeaders(&#10;                                        HeaderDocumentation.headerWithName(&quot;Content-Type&quot;).description(&quot;Gibt den Medientyp der Ressource (der Anfrage) an. Die Angabe ist immer: application/json; charset=UTF-8&quot;),&#10;                                        HeaderDocumentation.headerWithName(&quot;X-B3-TraceId&quot;).description(&quot;Der Header wird für das Tracing der Anfragen, auch über Anwendungsgrenzen hinweg, verwendet.&quot;),&#10;                                        HeaderDocumentation.headerWithName(&quot;X-B3-SpanId&quot;).description(&quot;Der Header wird für das Tracing der Anfragen, auch über Anwendungsgrenzen hinweg, verwendet.&quot;)),&#10;                                                               PayloadDocumentation.requestFields(&#10;                                        PayloadDocumentation.fieldWithPath(&quot;msisdn&quot;).description(&quot;Empfänger der SMS.&quot;),&#10;                                        PayloadDocumentation.fieldWithPath(&quot;currentMinBudget&quot;).description(&quot;Parameter `KOKO_AKT_RELAX_DUR` im SMS-Text.&quot;),&#10;                                        PayloadDocumentation.fieldWithPath(&quot;currentMonth&quot;).description(&quot;Parameter `KOKO_AKT_MONAT` im SMS-Text. Der String wird 1:1 übernommen, das Format bestimmt die Sprachapplikation.&quot;),&#10;                                        PayloadDocumentation.fieldWithPath(&quot;currentSumEuroCent&quot;).description(&quot;Parameter `KOKO_AKT_EURO` und `KOKO_AKT_CENT` im SMS-Text. Betrag in Eurocent.&quot;),&#10;                                        PayloadDocumentation.fieldWithPath(&quot;lastMonth&quot;).description(&quot;Parameter `KOKO_LAST_MONAT` im SMS-Text. Der String wird 1:1 übernommen, das Format bestimmt die Sprachapplikation.&quot;),&#10;                                        PayloadDocumentation.fieldWithPath(&quot;lastSumEuroCent&quot;).description(&quot;Parameter `KOKO_LAST_EURO` und `KOKO_LAST_CENT` im SMS-Text. Betrag in Eurocent.&quot;)),&#10;                                                               PayloadDocumentation.responseFields(&#10;                                        PayloadDocumentation.fieldWithPath(&quot;currPeriodEnd&quot;).type(&quot;DateTime (ISO-Format)&quot;).description(&#10;                                                &quot;Zitat Careka: \&quot;End of the current billing period. Corresponds to the last day of the month. (Time 23:59:59; CCS system date). &gt; 0 or  &gt; MIN_DATE\n\&quot;&quot;),&#10;                                        PayloadDocumentation.fieldWithPath(&quot;lastPeriodEnd&quot;).type(&quot;DateTime (ISO-Format)&quot;).description(&quot;Zitat Careka: \&quot;End of the last billing period.\n\n&quot; +&#10;                                                                                                                 &quot;- Corresponds to the last day of the month (time 23:59:59; CCS system date) of the previous month\n\n&quot; +&#10;                                                                                                                 &quot;- 0 or MIN_DATE, if the previous month has already been billed or with customers without billing data in the previous month (new customers, change scenarios, etc.) Otherwise &gt; 0 or  &gt; MIN_DATE\n\&quot;&quot;),&#10;                                        PayloadDocumentation.fieldWithPath(&quot;currPeriodAmountTotal&quot;).description(&quot;Zitat Careka: \&quot;Sum Information for the current billing period.\&quot;&quot;),&#10;                                        PayloadDocumentation.fieldWithPath(&quot;lastPeriodServices[].serviceQuantityInformationList[]&quot;).description(&quot;Zitat Careka: \&quot;List of service quatitiy informations\n\&quot;&quot;))));&#10;    }&#10;}" description="documentation-snippets for a test-controller" toReformat="false" toShortenFQNames="true">
    <variable name="CLASS_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="template-exception" value="throw new $exceptionName$ (&quot;$message$. Cause: &quot; e.getClass().getSimpleName() + e.getMessage(), e);" toReformat="false" toShortenFQNames="true">
    <variable name="exceptionName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="message" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="template-restController" value="@RestController&#10;@RequestMapping(&quot;/outerPath&quot;)&#10;@AllArgsConstructor&#10;public class $ClassName$ {&#10;&#10;    @VaspLog&#10;    @PostMapping(&quot;/innerPath&quot;)&#10;    public ResponseEntity&lt;Void&gt; method(@RequestBody RequestBody requestBody) {&#10;        //Services&#10;        return new ResponseEntity&lt;&gt;(new HttpHeaders(), HttpStatus.CREATED);&#10;    }&#10;&#10;}" toReformat="false" toShortenFQNames="true">
    <variable name="ClassName" expression="className()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
</templateSet>